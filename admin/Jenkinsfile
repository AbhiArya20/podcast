pipeline {
    agent any
    environment {
        NVM_DIR = '/var/lib/jenkins/.nvm'
    }
    options {
        ansiColor('xterm')
    }

    stages {
        // Stage 1: Code syntax and quality check
        stage('Code syntax and quality check') {
            steps {
                script {
                    sh """
                        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
                        # bash -c "source $NVM_DIR/nvm.sh && nvm install 20 && nvm use 20 && node -v && npm install && npm run lint"
                        sleep 1
                    """
                }
            }
        }

        // Stage 2: Build Docker images and delete the images from the local
        stage('Build Docker images') {
            steps {
                script {
                    // Stop all running containers with 'edudoor-admin' in their names
                    sh '''
                    if [ "$(docker ps -q -a -f name=edudoor-admin)" != "" ]; then
                        docker stop $(docker ps -q -a -f name=edudoor-admin)
                    fi
                    '''

                    // Remove all containers with 'edudoor-admin' in their names
                    sh '''
                    if [ "$(docker ps -q -a -f name=edudoor-admin)" != "" ]; then
                        docker rm $(docker ps -q -a -f name=edudoor-admin)
                    fi
                    '''

                    // Remove all images with 'edudoor-admin' in their names
                    sh '''
                    if [ "$(docker images -q -a -f reference=*edudoor-admin*)" != "" ]; then
                        docker rmi -f $(docker images -q -a -f reference=*edudoor-admin*)
                    fi
                    '''
                    sh 'sleep 10'
                    sh 'docker compose build'
                }
            }
        }

        // Stage 3: Push Docker images to the registry and delete the images from the local
        stage('Push Docker images') {
            steps {
                script {
                    docker.withRegistry('https://edudoor.azurecr.io', 'a7d21644-401c-4ac2-a194-04986a33e908') {
                        def services = sh(script: 'docker-compose config --services', returnStdout: true).trim().split('\n')
                        for (service in services) {
                            sh "docker tag edudoor-admin-${service} edudoor.azurecr.io/edudoor-admin:${service}"
                            sh "docker push edudoor.azurecr.io/edudoor-admin:${service}"
                            sh 'sleep 10'
                        }

                        // Stop all running containers with 'edudoor-admin' in their names
                        sh '''
                        if [ "$(docker ps -q -a -f name=edudoor-admin)" != "" ]; then
                            docker stop $(docker ps -q -a -f name=edudoor-admin)
                        fi
                        '''

                        // Remove all containers with 'edudoor-admin' in their names
                        sh '''
                        if [ "$(docker ps -q -a -f name=edudoor-admin)" != "" ]; then
                            docker rm $(docker ps -q -a -f name=edudoor-admin)
                        fi
                        '''

                        // Remove all images with 'edudoor-admin' in their names
                        sh '''
                        if [ "$(docker images -q -a -f reference=*edudoor-admin*)" != "" ]; then
                            docker rmi -f $(docker images -q -a -f reference=*edudoor-admin*)
                        fi
                        '''
                    }
                }
            }
        }


        // Stage 4: Install Docker on VM and Update Docker containers on VM
        stage('Install Docker on VM and Update Docker containers on VM') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'fa09b77d-b473-4fa9-90b5-e426fc2efc13', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME'),
                                     usernamePassword(credentialsId: 'a7d21644-401c-4ac2-a194-04986a33e908', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh '''
                        sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no $USERNAME@20.197.55.201 "
                        sudo apt-get update
                        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
                        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                        sudo add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable'
                        sudo apt-get update
                        sudo apt-get install -y docker-ce
                        sleep 2s

                        echo $DOCKER_PASSWORD | sudo docker login edudoor.azurecr.io -u $DOCKER_USERNAME --password-stdin

                        if ! (sudo docker info | grep 'Swarm: active' > /dev/null); then
                            sudo docker swarm init
                        fi

                        # Pull the Docker image from Azure Container Registry
                        sudo docker pull edudoor.azurecr.io/edudoor-admin:admin

                        # Check if the service already exists, if not, create it
                        if !(sudo docker service ls | awk '{print \$2}' | grep admin > /dev/null); then
                            sudo docker service create --replicas 1 --name admin --update-delay 10s --update-parallelism 1 --update-order start-first --publish published=80,target=80 edudoor.azurecr.io/edudoor-admin:admin
                        else
                            # Update the Docker service with rolling update
                            sudo docker service update --force --image edudoor.azurecr.io/edudoor-admin:admin --update-delay 10s --update-parallelism 1 --update-order start-first --update-failure-action rollback admin
                        fi
                        sleep 1
                        "
                        '''
                    }
                }
            }
        }
    }
}